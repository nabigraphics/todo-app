{"version":3,"sources":["components/common/GlobalStyle.tsx","components/common/Input.tsx","components/common/Button.tsx","components/todo/TodoTextForm.tsx","components/todo/TodoListItem.tsx","components/todo/TodoList.tsx","components/common/Select.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalStyle","styles","css","normalize","Input","forwardRef","props","ref","StyledInput","Button","StyledButton","memo","onAdd","inputRef","useRef","handleAdd","useCallback","current","value","handleKeyPress","e","key","handleClick","StyledBlock","TodoTextInput","onKeyPress","placeholder","onClick","id","text","checked","onToggle","onRemove","memoizedText","useMemo","StyledText","title","memoizedCloseButton","stopPropagation","color","TodoList","items","transitions","useTransition","item","from","height","opacity","enter","leave","config","mass","tension","friction","map","div","style","FilterType","Select","children","StyledSelectWrapper","StyledSelect","StyledIconWrapper","StyledChevronDown","size","ChevronDown","App","useState","count","setCount","All","filter","setFilter","list","setList","filteredList","Active","Done","trim","concat","handleToggle","index","findIndex","newList","selected","handleRemove","handleFilterChange","target","filterBox","StyledFilterContainer","onChange","StyledAppContainer","StyledLayoutContainer","StyledTodoContainer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7ca6c49f.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { Global, css } from \"@emotion/core\";\nimport normalize from \"normalize.css\";\n\nconst GlobalStyle: FC = () => (\n  <Global\n    styles={css`\n      ${normalize};\n      body {\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n          \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\",\n          \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n      }\n    `}\n  />\n);\n\nexport default GlobalStyle;\n","import React, { forwardRef, InputHTMLAttributes } from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst Input = forwardRef<\n  HTMLInputElement,\n  InputHTMLAttributes<HTMLInputElement>\n>((props, ref) => {\n  return <StyledInput ref={ref} {...props} />;\n});\n\nexport default Input;\n\nconst StyledInput = styled.input`\n  font-size: 16px;\n  line-height: 24px;\n  padding: 8px 14px;\n  border: 1px solid #d9d9d9;\n  outline: none;\n  border-radius: 0;\n  &:hover {\n    border-color: #bfbfbf;\n  }\n  &:focus {\n    border-color: #1890ff;\n  }\n`;\n","import React, { ButtonHTMLAttributes, forwardRef } from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst Button = forwardRef<\n  HTMLButtonElement,\n  ButtonHTMLAttributes<HTMLButtonElement>\n>((props, ref) => {\n  return <StyledButton ref={ref} {...props} />;\n});\n\nexport default Button;\n\nconst StyledButton = styled.button`\n  cursor: pointer;\n  font-size: 16px;\n  line-height: 24px;\n  padding: 8px 14px;\n  box-sizing: border-box;\n  color: white;\n  border: 1px solid #096dd9;\n  background-color: #096dd9;\n  border-radius: 0;\n  outline: none;\n  &:hover {\n    border-color: #1890ff;\n    background-color: #1890ff;\n  }\n  &:active {\n    border-color: #0050b3;\n    background-color: #0050b3;\n  }\n`;\n","import React, {\n  KeyboardEventHandler,\n  memo,\n  MouseEventHandler,\n  useCallback,\n  useRef,\n} from \"react\";\nimport Input from \"../common/Input\";\nimport styled from \"@emotion/styled\";\nimport Button from \"../common/Button\";\n\ntype TodoTextFormProps = {\n  onAdd(text: string): void;\n};\n\nconst TodoTextForm = ({ onAdd }: TodoTextFormProps) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleAdd = useCallback(() => {\n    if (typeof onAdd === \"function\") {\n      if (inputRef.current) {\n        onAdd(inputRef.current.value);\n        inputRef.current.value = \"\";\n      }\n    }\n  }, [onAdd]);\n\n  const handleKeyPress = useCallback<KeyboardEventHandler>(\n    (e) => {\n      if (e.key === \"Enter\") {\n        handleAdd();\n      }\n    },\n    [handleAdd]\n  );\n\n  const handleClick = useCallback<MouseEventHandler>(() => {\n    handleAdd();\n  }, [handleAdd]);\n\n  return (\n    <StyledBlock>\n      <TodoTextInput\n        ref={inputRef}\n        onKeyPress={handleKeyPress}\n        placeholder={\"What needs to be done?\"}\n      />\n      <Button onClick={handleClick}>Add</Button>\n    </StyledBlock>\n  );\n};\n\nexport default memo(TodoTextForm);\n\nconst StyledBlock = styled.div`\n  display: flex;\n  margin-bottom: 16px;\n`;\n\nconst TodoTextInput = styled(Input)`\n  flex: 1 1 0;\n`;\n","import React, { memo, useMemo } from \"react\";\nimport { TodoListItemI } from \"./types\";\nimport { X, Circle, CheckCircle } from \"react-feather\";\nimport styled from \"@emotion/styled\";\n\nexport type TodoListItemProps = TodoListItemI & {\n  onToggle(id: number): void;\n  onRemove(id: number): void;\n};\n\nconst TodoListItem = ({\n  id,\n  text,\n  checked,\n  onToggle,\n  onRemove,\n}: TodoListItemProps) => {\n  const memoizedText = useMemo(\n    () => (\n      <StyledText title={text} checked={checked}>\n        {text}\n      </StyledText>\n    ),\n    [text, checked]\n  );\n  const memoizedCloseButton = useMemo(\n    () => (\n      <StyledButton\n        onClick={(e) => {\n          e.stopPropagation();\n          onRemove(id);\n        }}\n      >\n        <X />\n      </StyledButton>\n    ),\n    [onRemove, id]\n  );\n  return (\n    <StyledBlock onClick={() => onToggle(id)}>\n      {checked ? (\n        <CheckCircle color={\"#52c41a\"} />\n      ) : (\n        <Circle color={\"#d9d9d9\"} />\n      )}\n      {memoizedText}\n      {memoizedCloseButton}\n    </StyledBlock>\n  );\n};\n\nexport default memo(TodoListItem);\n\nconst StyledBlock = styled.li`\n  padding: 16px;\n  box-sizing: border-box;\n  background-color: #fafafa;\n  display: inline-flex;\n  align-items: center;\n  width: 100%;\n  cursor: pointer;\n`;\n\nconst StyledText = styled.span<Pick<TodoListItemProps, \"checked\">>`\n  flex: 1 1 0;\n  white-space: nowrap;\n  font-size: 16px;\n  line-height: 24px;\n  margin-left: 12px;\n  text-decoration: ${(props) => (props.checked ? \"line-through\" : \"none\")};\n  color: ${(props) =>\n    props.checked ? \"rgba(0,0,0,0.25)\" : \"rgba(0,0,0,0.85)\"};\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst StyledButton = styled.button`\n  padding: 4px;\n  box-sizing: border-box;\n  width: 32px;\n  height: 32px;\n  border: 0;\n  outline: none;\n  cursor: pointer;\n  background-color: transparent;\n  &:hover {\n    background-color: #f5f5f5;\n  }\n  &:active {\n    background-color: #f0f0f0;\n  }\n`;\n","import React from \"react\";\nimport TodoListItem, { TodoListItemProps } from \"./TodoListItem\";\nimport styled from \"@emotion/styled\";\nimport { useTransition, animated } from \"react-spring\";\n\ntype TodoListProps = {\n  items: any[];\n} & Pick<TodoListItemProps, \"onToggle\" | \"onRemove\">;\n\nconst TodoList = ({ items, onToggle, onRemove }: TodoListProps) => {\n  const transitions = useTransition(items, (item) => item.id, {\n    from: { height: \"0px\", opacity: 0 },\n    enter: { height: \"64px\", opacity: 1 },\n    leave: { height: \"0px\", opacity: 0 },\n    config: { mass: 5, tension: 500, friction: 100 },\n  });\n  return (\n    <StyledBlock>\n      {transitions.map(({ item, props, key }) => (\n        <animated.div key={key} style={{ ...props }}>\n          <TodoListItem\n            key={item.id}\n            id={item.id}\n            text={item.text}\n            checked={item.checked}\n            onToggle={onToggle}\n            onRemove={onRemove}\n          />\n        </animated.div>\n      ))}\n    </StyledBlock>\n  );\n};\n\nexport default TodoList;\n\nconst StyledBlock = styled.div`\n  margin: 0;\n  padding: 0;\n  & > div {\n    overflow: hidden;\n    border-bottom: 1px solid #d9d9d9;\n  }\n`;\n","import React, { FC, SelectHTMLAttributes } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"@emotion/core\";\nimport { ChevronDown } from \"react-feather\";\n\ntype SelectProps = SelectHTMLAttributes<HTMLSelectElement>;\n\nconst Select: FC<SelectProps> = ({ children, ...props }) => {\n  return (\n    <StyledSelectWrapper>\n      <StyledSelect {...props}>{children}</StyledSelect>\n      <StyledIconWrapper>\n        <StyledChevronDown size={20} />\n      </StyledIconWrapper>\n    </StyledSelectWrapper>\n  );\n};\n\nexport default Select;\n\nconst StyledSelectWrapper = styled.div(\n  () => css`\n    display: inline-flex;\n    user-select: none;\n    width: auto;\n    position: relative;\n    border: 1px solid #d9d9d9;\n    outline: none;\n    border-radius: 0;\n    &:hover {\n      border-color: #bfbfbf;\n    }\n    &:focus-within {\n      border-color: #1890ff;\n    }\n  `\n);\n\nconst StyledSelect = styled.select`\n  appearance: none;\n  border: none;\n  outline: none;\n  font-size: 16px;\n  line-height: 24px;\n  padding: 8px 36px 8px 14px;\n  width: 100%;\n`;\n\nconst StyledIconWrapper = styled.div`\n  top: 0;\n  width: 36px;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  right: 0;\n  pointer-events: none;\n`;\n\nconst StyledChevronDown = styled(ChevronDown)`\n  color: #bfbfbf;\n`;\n","import React, { useCallback, useMemo, useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport GlobalStyle from \"./components/common/GlobalStyle\";\nimport TodoTextForm from \"./components/todo/TodoTextForm\";\nimport TodoList from \"./components/todo/TodoList\";\nimport { TodoListItemI } from \"./components/todo/types\";\nimport Select from \"./components/common/Select\";\n\nenum FilterType {\n  All = \"all\",\n  Active = \"active\",\n  Done = \"done\",\n}\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const [filter, setFilter] = useState<FilterType>(FilterType.All);\n  const [list, setList] = useState<TodoListItemI[]>([\n    { id: -3, text: \"Buy the fresh milk.\", checked: false },\n    { id: -2, text: \"Bake a cake.\", checked: false },\n    { id: -1, text: \"Invite a friends.\", checked: false },\n  ]);\n\n  const filteredList = useMemo(() => {\n    switch (filter) {\n      case FilterType.Active:\n        return list.filter((item) => !item.checked);\n\n      case FilterType.Done:\n        return list.filter((item) => item.checked);\n      default:\n        return list;\n    }\n  }, [filter, list]);\n\n  const handleAdd = useCallback(\n    (text) => {\n      if (text.trim() === \"\") return;\n      setList((list) => list.concat({ id: count, text, checked: false }));\n      setCount((count) => count + 1);\n    },\n    [count]\n  );\n\n  const handleToggle = useCallback((id) => {\n    setList((list) => {\n      const index = list.findIndex((item) => item.id === id);\n      const newList = [...list];\n      if (index > -1) {\n        const selected = list[index];\n        newList[index] = {\n          ...selected,\n          checked: !selected.checked,\n        };\n      }\n      return newList;\n    });\n  }, []);\n\n  const handleRemove = useCallback((id) => {\n    setList((list) => list.filter((item) => item.id !== id));\n  }, []);\n\n  const handleFilterChange = useCallback((e) => {\n    setFilter(e.target.value as FilterType);\n  }, []);\n\n  const filterBox = useMemo(\n    () => (\n      <StyledFilterContainer>\n        <Select onChange={handleFilterChange}>\n          <option value={FilterType.All}>All</option>\n          <option value={FilterType.Active}>Active</option>\n          <option value={FilterType.Done}>Done</option>\n        </Select>\n      </StyledFilterContainer>\n    ),\n    [handleFilterChange]\n  );\n\n  return (\n    <>\n      <GlobalStyle />\n      <StyledAppContainer>\n        <StyledLayoutContainer>\n          <StyledTodoContainer>\n            <h1>React Todo App</h1>\n            <TodoTextForm onAdd={handleAdd} />\n            {filterBox}\n            <TodoList\n              items={filteredList}\n              onToggle={handleToggle}\n              onRemove={handleRemove}\n            />\n          </StyledTodoContainer>\n        </StyledLayoutContainer>\n      </StyledAppContainer>\n    </>\n  );\n};\n\nexport default App;\n\nconst StyledAppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  width: 100%;\n  min-height: 100vh;\n`;\n\nconst StyledLayoutContainer = styled.div`\n  padding: 16px;\n  box-sizing: border-box;\n  flex: 1 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst StyledTodoContainer = styled.div`\n  max-width: 560px;\n  width: 100%;\n`;\n\nconst StyledFilterContainer = styled.div`\n  margin-bottom: 8px;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./wdyr\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}